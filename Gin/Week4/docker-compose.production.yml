version: '3.8'

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - news-network
    restart: unless-stopped

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    networks:
      - news-network
    restart: unless-stopped

  # Redis
  redis:
    image: redis:7-alpine
    hostname: redis
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - news-network
    restart: unless-stopped

  # News API Service (with web interface)
  news-api:
    build:
      context: .
      dockerfile: Dockerfile.production
    hostname: news-api
    container_name: news-api
    ports:
      - "80:8080"
    environment:
      - REDIS_URL=redis:6379
      - KAFKA_BROKER=kafka:29092
      - KAFKA_TOPIC=news-updates
      - API_PORT=8080
      - RATE_LIMIT_REQUESTS=1000
      - RATE_LIMIT_WINDOW=60
    depends_on:
      - kafka
      - redis
    networks:
      - news-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # News Collector Service
  news-collector:
    build:
      context: .
      dockerfile: Dockerfile.production
    hostname: news-collector
    container_name: news-collector
    ports:
      - "8081:8081"
    environment:
      - REDIS_URL=redis:6379
      - KAFKA_BROKER=kafka:29092
      - KAFKA_TOPIC=news-updates
      - COLLECTOR_PORT=8081
    depends_on:
      - kafka
      - redis
    networks:
      - news-network
    restart: unless-stopped
    command: ["./collector"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    hostname: nginx
    container_name: nginx
    ports:
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - news-api
    networks:
      - news-network
    restart: unless-stopped

volumes:
  redis_data:

networks:
  news-network:
    driver: bridge
